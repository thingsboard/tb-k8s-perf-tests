#
# ThingsBoard, Inc. ("COMPANY") CONFIDENTIAL
#
# Copyright Â© 2016-2019 ThingsBoard, Inc. All Rights Reserved.
#
# NOTICE: All information contained herein is, and remains
# the property of ThingsBoard, Inc. and its suppliers,
# if any.  The intellectual and technical concepts contained
# herein are proprietary to ThingsBoard, Inc.
# and its suppliers and may be covered by U.S. and Foreign Patents,
# patents in process, and are protected by trade secret or copyright law.
#
# Dissemination of this information or reproduction of this material is strictly forbidden
# unless prior written permission is obtained from COMPANY.
#
# Access to the source code contained herein is hereby forbidden to anyone except current COMPANY employees,
# managers or contractors who have executed Confidentiality and Non-disclosure agreements
# explicitly covering such access.
#
# The copyright notice above does not evidence any actual or intended publication
# or disclosure  of  this source code, which includes
# information that is confidential and/or proprietary, and is a trade secret, of  COMPANY.
# ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,
# OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT
# THE EXPRESS WRITTEN CONSENT OF COMPANY IS STRICTLY PROHIBITED,
# AND IN VIOLATION OF APPLICABLE LAWS AND INTERNATIONAL TREATIES.
# THE RECEIPT OR POSSESSION OF THIS SOURCE CODE AND/OR RELATED INFORMATION
# DOES NOT CONVEY OR IMPLY ANY RIGHTS TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS,
# OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
#

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: zookeeper
  namespace: thingsboard
spec:
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      nodeSelector:
        nodeType: thirdparty
      containers:
      - name: server
        imagePullPolicy: Always
        image: zookeeper:3.5.6
        ports:
        - containerPort: 2181
        readinessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 2181
        livenessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 2181
        env:
        - name: ZOO_MY_ID
          value: "1"
        - name: ZOO_SERVERS
          value: "server.1=0.0.0.0:2888:3888;0.0.0.0:2181"
        - name: ZOO_MAX_CLIENT_CNXNS
          value: "200"
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: thingsboard
spec:
  type: ClusterIP
  selector:
    app: zookeeper
  ports:
  - name: zk-port
    port: 2181
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: tb-kafka
  namespace: thingsboard
spec:
  template:
    metadata:
      labels:
        app: tb-kafka
    spec:
      nodeSelector:
        nodeType: tb-kafka
      containers:
      - name: server
        imagePullPolicy: Always
        image: wurstmeister/kafka:2.12-2.2.1
        ports:
        - containerPort: 9092
        readinessProbe:
          periodSeconds: 20
          tcpSocket:
            port: 9092
        resources:
          requests:
            cpu: "1500m"
            memory: 6Gi
        livenessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 9092
        env:
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper:2181"
        - name: KAFKA_ADVERTISED_HOST_NAME
          value: "tb-kafka"
        - name: KAFKA_ADVERTISED_PORT
          value: "9092"
        - name: KAFKA_LISTENERS
          value: "INSIDE://:9093,OUTSIDE://:9092"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "INSIDE://:9093,OUTSIDE://tb-kafka:9092"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "INSIDE"
        - name: KAFKA_CREATE_TOPICS
          value: "js.eval.requests:18:1:delete --config=retention.ms=600000 --config=segment.bytes=26214400 --config=retention.bytes=5368709120,tb.rule-engine:18:1:delete --config=retention.ms=600000 --config=segment.bytes=26214400 --config=retention.bytes=5368709120"
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "false"
        - name: KAFKA_LOG_RETENTION_BYTES
          value: "1073741824"
        - name: KAFKA_LOG_SEGMENT_BYTES
          value: "268435456"
        - name: KAFKA_LOG_RETENTION_MS
          value: "300000"
        - name: KAFKA_LOG_CLEANUP_POLICY
          value: "delete"
      initContainers:
      - name: wait-for-zookeeper
        image: busybox:1.28
        command: ['sh', '-c', 'echo "Waiting for zookeeper to launch..."; until nc -w 1 -z zookeeper 2181; do echo "Waiting for zookeeper"; sleep 1; done; echo "Zookeeper launched";']
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: tb-kafka
  namespace: thingsboard
spec:
  type: ClusterIP
  selector:
    app: tb-kafka
  ports:
  - name: tb-kafka-port
    port: 9092
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: tb-redis
  namespace: thingsboard
spec:
  template:
    metadata:
      labels:
        app: tb-redis
    spec:
      nodeSelector:
        nodeType: thirdparty
      containers:
      - name: server
        imagePullPolicy: Always
        image: redis:4.0
        ports:
        - containerPort: 6379
        readinessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 6379
        livenessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 6379
        resources:
          requests:
            cpu: "1000m"
            memory: 3Gi
        volumeMounts:
        - mountPath: /data
          name: redis-data
      volumes:
      - name: redis-data
        emptyDir: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: tb-redis
  namespace: thingsboard
spec:
  type: ClusterIP
  selector:
    app: tb-redis
  ports:
  - name: tb-redis-port
    port: 6379
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: tb-js-executor
  namespace: thingsboard
spec:
  replicas: 9
  selector:
    matchLabels:
      app: tb-js-executor
  template:
    metadata:
      labels:
        app: tb-js-executor
    spec:
      nodeSelector:
        nodeType: js-executor
      imagePullSecrets:
        - name: regcred
      containers:
      - name: server
        imagePullPolicy: Always
        image: thingsboard/tb-js-executor:2.5.0
        env:
        - name: REMOTE_JS_EVAL_REQUEST_TOPIC
          value: "js.eval.requests"
        - name: TB_KAFKA_SERVERS
          value: "tb-kafka:9092"
        - name: LOGGER_LEVEL
          value: "info"
        - name: LOG_FOLDER
          value: "logs"
        - name: LOGGER_FILENAME
          value: "tb-js-executor-%DATE%.log"
        - name: DOCKER_MODE
          value: "true"
        - name: SCRIPT_BODY_TRACE_FREQUENCY
          value: "1000"
        - name: SCRIPT_USE_SANDBOX
          value: "false"
      initContainers:
      - name: wait-for-kafka
        image: busybox:1.28
        command: ['sh', '-c', 'echo "Waiting for kafka to launch..."; until nc -w 1 -z tb-kafka 9092; do echo "Waiting for kafka"; sleep 1; done; echo "Kafka launched";']
      restartPolicy: Always
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: tb-node
  namespace: thingsboard
spec:
  replicas: 2
  selector:
    matchLabels:
      app: tb-node
  template:
    metadata:
      labels:
        app: tb-node
    spec:
      nodeSelector:
        nodeType: tb-node
      volumes:
        - name: tb-node-config
          configMap:
            name: tb-node-config
            items:
            - key: conf
              path:  thingsboard.conf
            - key: logback
              path:  logback.xml
      imagePullSecrets:
        - name: regcred
      containers:
      - name: server
        imagePullPolicy: Always
        image: thingsboard/tb-node:2.5.0
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9001
          name: rpc
        env:
        - name: RPC_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: CLUSTER_NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: TB_HOST
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: ZOOKEEPER_ENABLED
          value: "true"
        - name: ZOOKEEPER_URL
          value: "zookeeper:2181"
        - name: ZOOKEEPER_SESSION_TIMEOUT_MS
          value: "30000"
        - name: ZOOKEEPER_CONNECTION_TIMEOUT_MS
          value: "30000"
        - name: TB_KAFKA_SERVERS
          value: "tb-kafka:9092"
        - name: JS_EVALUATOR
          value: "remote"
        - name: CACHE_TYPE
          value: "redis"
        - name: REDIS_HOST
          value: "tb-redis"
        - name: HTTP_LOG_CONTROLLER_ERROR_STACK_TRACE
          value: "false"
        - name: SPRING_DATASOURCE_MAXIMUM_POOL_SIZE
          value: "4"
        - name: PERSIST_STATE_TO_TELEMETRY
          value: "true"
        - name: DEFAULT_STATE_CHECK_INTERVAL
          value: "60"
        - name: DEFAULT_INACTIVITY_TIMEOUT
          value: "300"
        - name: CLUSTER_VIRTUAL_NODES_SIZE
          value: "4096"
        - name: TB_RULE_ENGINE_STATS_ENABLED
          value: "true"
        - name: TB_RULE_ENGINE_STATS_PRINT_INTERVAL_MS
          value: "10000"
        - name: TB_CLUSTER_STATS_ENABLED
          value: "true"
        - name: TB_CLUSTER_STATS_PRINT_INTERVAL_MS
          value: "10000"
        - name: CASSANDRA_QUERY_PRINT_FREQ
          value: "10000"
        - name: SQL_ATTRIBUTES_BATCH_STATS_PRINT_MS
          value: "1000"
        - name: TS_KV_PARTITIONING
          value: "INDEFINITE"
        - name: ACTORS_RULE_JS_THREAD_POOL_SIZE
          value: "50"
        - name: TB_JS_REMOTE_STATS_ENABLED
          value: "true"
        - name: TB_JS_REMOTE_STATS_PRINT_INTERVAL_MS
          value: "1000"
        - name: ACTORS_JS_STATISTICS_PRINT_INTERVAL_MS
          value: "1000"
        - name: TB_RULE_ENGINE_MAX_POLL_RECORDS_PER_SECOND
          value: "10000000"
        - name: TB_RULE_ENGINE_MAX_POLL_RECORDS_PER_MINUTE
          value: "120000000"
        - name: REMOTE_JS_MAX_PENDING_REQUESTS
          value: "20000"
        - name: REMOTE_JS_MAX_REQUEST_TIMEOUT
          value: "20000"
        envFrom:
        - configMapRef:
            name: tb-node-db-config
        volumeMounts:
          - mountPath: /config
            name: tb-node-config
        resources:
          requests:
            cpu: "2500m"
            memory: 5500M
        livenessProbe:
          httpGet:
            path: /login
            port: http
          initialDelaySeconds: 120
          timeoutSeconds: 10
      initContainers:
      - name: wait-for-kafka
        image: busybox:1.28
        command: ['sh', '-c', 'echo "Waiting for kafka to launch..."; until nc -w 1 -z tb-kafka 9092; do echo "Waiting for kafka"; sleep 1; done; echo "Kafka launched";']
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: tb-node
  namespace: thingsboard
spec:
  type: ClusterIP
  selector:
    app: tb-node
  ports:
  - port: 8080
    name: http
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: tb-ingress
  namespace: thingsboard
  annotations:
    kubernetes.io/ingress.class: "nginx"
    ingress.kubernetes.io/use-regex: "true"
    ingress.kubernetes.io/ssl-redirect: "false"
    ingress.kubernetes.io/proxy-read-timeout: "3600"
spec:
  rules:
  - http:
      paths:
      - path: /
        backend:
          serviceName: tb-node
          servicePort: 8080
---
